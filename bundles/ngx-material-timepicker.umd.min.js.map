{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","TimepickerUtils","AM","PM","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isBetween","before","after","TimeAdapter","parseTime","format","indexOf","period","trim","substr","toUpperCase","isPeriodValid","TimePeriod","_a","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","split","h","formatHour","parseInt","isPM","formatTime","timeFormat","TimeFormat","timeMask","DateTime","fromFormat","toFormat","toLowerCase","convertTimeToDateTime","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","Error","isAfter","isBefore","currentHour","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","asObservable","setDefaultTimeIfAvailable","setDefaultTime","console","getFullTime","getValue","defaultTime","toJSDate","fromJSDate","isValid","getHours","formatHourByPeriod","getMinutes","resetTime","Injectable","args","providedIn","HOUR","MINUTE","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","dispatchEvent","event","type","ENTER","LEAVE","NgxMaterialTimepickerComponent","timepickerService","eventService","_this","timeUnit","TimeUnit","activeTimeUnit","isOpened","isEsc","timeSet","EventEmitter","opened","closed","hourSelected","subscriptions","merge","backdropClick","keydownEvent","pipe","filter","keyCode","subscribe","close","_minutesGap","gap","Math","floor","timepickerInput","disabled","ngOnInit","selectedHour","selectedMinute","selectedPeriod","registerInput","input","onHourChange","onHourSelected","changeTimeUnit","onMinuteChange","changePeriod","setTime","open","animationState","AnimationState","animationDone","phaseName","toState","onKeydown","stopPropagation","ngOnDestroy","forEach","subscription","unsubscribe","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","Output","ViewChild","HostListener","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","timepicker","ContentChild","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_format","_value","timepickerSubscriptions","onTouched","onChange","_min","_max","picker","registerTimepicker","updateInputValue","_timepicker","warn","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","host","[disabled]","(input)","(blur)","ElementRef","NgxMaterialTimepickerThemeDirective","element","ngAfterViewInit","theme","setTheme","val","prop","setProperty","replace","fill","map","v","disableHours","hours","config","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","minTime","maxTime","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","countAngleByCords","x0","y0","x","y","currentAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","isHourSelected","isClockFaceDisabled","isMinuteSelected","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","every","availableTime","sqrt","pow","changeDetection","ChangeDetectionStrategy","OnPush","step","round","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeFormatterPipe","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeChanged","focused","unfocused","timeList","isEditable","firstChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","onKeyDown","char","String","fromCharCode","isInputAllowed","isTimeDisabledToChange","nextTime","test","isTimeUnavailable","changeTimeByArrow","some","ctrlKey","metaKey","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","document","activeElement","isFocusActive","focus","Optional","Inject","DOCUMENT","NgxMaterialTimepickerModule","NgModule","imports","CommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { DateTime } from 'luxon';\r\n\r\nexport namespace TimepickerUtils {\r\n\r\n    export function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n        if (unit === 'hours') {\r\n            return time.hour >= compareWith.hour;\r\n        }\r\n        if (unit === 'minutes') {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    export function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n        if (unit === 'hours') {\r\n            return time.hour <= compareWith.hour;\r\n        }\r\n        if (unit === 'minutes') {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    export function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n        if (unit === 'hours') {\r\n            return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\r\n        }\r\n        if (unit === 'minutes') {\r\n            return isSameOrBefore(time, after) && isSameOrAfter(time, before);\r\n        }\r\n    }\r\n}\r\n","export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n","export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWELVE_SHORT = 'h:m a',\r\n    TWENTY_FOUR = 'HH:mm',\r\n    TWENTY_FOUR_SHORT = 'H:m'\r\n}\r\n","import { DateTime } from 'luxon';\r\n\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { TimepickerUtils } from '../utils/timepicker.utils';\r\n\r\n// @dynamic\r\nexport class TimeAdapter {\r\n\r\n    static parseTime(time: string, format = 12): string {\r\n        if (time.indexOf(':') === -1) {\r\n            return 'Invalid time';\r\n        }\r\n        let period = time.trim().substr(time.length - 2).toUpperCase();\r\n\r\n        const isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;\r\n        const [h, m] = time.split(':');\r\n\r\n\r\n\r\n        if (format === 24) {\r\n            const formattedHours = isPeriodValid ? this.formatHour(+h, 12, period as TimePeriod) : +h;\r\n            return `${formattedHours}:${parseInt(m, 10)}`;\r\n        }\r\n\r\n        const isPM = +h > 12;\r\n        const hours = isPM ? +h - 12 : +h;\r\n\r\n        period = isPeriodValid ? period : isPM ? TimePeriod.PM : TimePeriod.AM;\r\n\r\n        return `${hours}:${parseInt(m, 10)} ${period}`;\r\n    }\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = (format === 24) ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\r\n\r\n        return DateTime.fromFormat(this.parseTime(time, format), timeMask).toFormat(timeFormat).toLowerCase();\r\n    }\r\n\r\n    static convertTimeToDateTime(time: string, format = 12): DateTime {\r\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\r\n        return DateTime.fromFormat(this.parseTime(time, format), timeMask);\r\n    }\r\n\r\n    static isTimeAvailable(time: string, min?: DateTime, max?: DateTime, granularity?: 'hours' | 'minutes', minutesGap?: number): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n\r\n        const convertedTime = this.convertTimeToDateTime(time);\r\n        const minutes = convertedTime.minute;\r\n\r\n        if (minutesGap && (minutes % minutesGap !== 0)) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && TimepickerUtils.isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && TimepickerUtils.isSameOrBefore(convertedTime, max, granularity);\r\n        const isBetween = (min && max)\r\n            && TimepickerUtils.isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { TimeAdapter } from './time-adapter';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\r\n\r\n        if (isPeriodValid) {\r\n            this.periodSubject.next(period);\r\n        }\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\r\n                this.setDefaultTime(TimeAdapter.formatTime(time, format), format);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private setDefaultTime(time: string, format: number) {\r\n        const defaultTime = TimeAdapter.convertTimeToDateTime(time, format).toJSDate();\r\n\r\n        if (DateTime.fromJSDate(defaultTime).isValid) {\r\n            const period = time.substr(time.length - 2).toUpperCase();\r\n            const hour = defaultTime.getHours();\r\n\r\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = period as TimePeriod;\r\n\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\r\n    switch (period) {\r\n        case TimePeriod.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case TimePeriod.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\r\n","export enum TimeUnit {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this.backdropClickSubject.next(<MouseEvent>event);\r\n                break;\r\n            case 'keydown':\r\n                this.keydownEventSubject.next(<KeyboardEvent>event);\r\n                break;\r\n            default:\r\n                throw new Error('no such event type');\r\n        }\r\n    }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ClockFaceTime } from './models/clock-face-time.interface';\r\nimport { TimePeriod } from './models/time-period.enum';\r\nimport { merge, Subscription } from 'rxjs';\r\nimport { NgxMaterialTimepickerService } from './services/ngx-material-timepicker.service';\r\nimport { TimeUnit } from './models/time-unit.enum';\r\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\r\nimport { filter } from 'rxjs/operators';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { DateTime } from 'luxon';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    templateUrl: './ngx-material-timepicker.component.html',\r\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Input() enableKeyboardInput: boolean;\r\n    @Input() preventOverlayClick: boolean;\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this.setDefaultTime(time);\r\n    }\r\n\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() opened = new EventEmitter<null>();\r\n    @Output() closed = new EventEmitter<null>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    @ViewChild('timepickerww') timepickerComponent: ElementRef;\r\n\r\n    private _minutesGap: number;\r\n    private timepickerInput: TimepickerDirective;\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | DateTime {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | DateTime {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onHourSelected(hour: number): void {\r\n        this.changeTimeUnit(TimeUnit.MINUTE);\r\n        this.hourSelected.next(hour);\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime(): void {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.setDefaultTimeIfAvailable(\r\n            time, this.minTime as DateTime, this.maxTime as DateTime, this.format, this.minutesGap);\r\n    }\r\n\r\n    open(): void {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n        this.opened.next();\r\n    }\r\n\r\n    close(): void {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n","import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import { Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { DateTime } from 'luxon';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    // tslint:disable-next-line\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToDateTime(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | DateTime;\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToDateTime(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | DateTime;\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, this._format);\r\n        if (TimeAdapter.isTimeAvailable(time, <DateTime>this._min, <DateTime>this._max, 'minutes', this._timepicker.minutesGap)) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n\r\n    onTouched = () => {\r\n    }\r\n\r\n    private onChange: (value: any) => void = () => {\r\n    }\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        this._timepicker.setDefaultTime(time);\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\r\n\r\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\r\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\r\n\r\n    private element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (const val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === 'string') {\r\n                    for (const prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                this.setTheme(theme[val]);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\n    export function getHours(format: number): ClockFaceTime[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return {time: time === 24 ? 0 : time, angle};\r\n        });\r\n    }\r\n\r\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\r\n                const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n\r\n    export function getMinutes(gap = 1): ClockFaceTime[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n                };\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n","import { EventEmitter, Input, Output } from '@angular/core';\r\nimport { DateTime } from 'luxon';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { getHours } from '../../utils/timepicker-time.namespace';\r\n\r\n\r\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = getHours(format);\r\n    }\r\n\r\n    onTimeSelected(time: number): void {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\n","import {AfterContentInit, Component} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport { disableHours } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport { disableHours } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { DateTime } from 'luxon';\r\nimport { getMinutes, disableMinutes } from '../../utils/timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    templateUrl: './ngx-material-timepicker-face.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<number>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    isHourSelected(hour: number): boolean {\r\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    isMinuteSelected(minute: number): boolean {\r\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { DateTime } from 'luxon';\r\nimport { getHours, disableHours, getMinutes, disableMinutes } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n\r\n    isHintVisible: boolean;\r\n\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = getHours(this.format);\r\n\r\n            this.hours = disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n\r\n            this.minutes = disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n\r\n    showHint(): void {\r\n        this.isHintVisible = true;\r\n    }\r\n\r\n    hideHint(): void {\r\n        this.isHintVisible = false;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number, timeUnit: TimeUnit): any {\r\n        if (time === undefined) {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return DateTime.fromObject({hour: time}).toFormat('HH');\r\n            case TimeUnit.MINUTE:\r\n                return DateTime.fromObject({minute: time}).toFormat('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n","/* tslint:disable:triple-equals */\r\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { TimeFormatterPipe } from '../../pipes/time-formatter.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() time: string;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() focused = new EventEmitter<null>();\r\n    @Output() unfocused = new EventEmitter<null>();\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\r\n            if (this.isEditable && !changes['time'].firstChange) {\r\n                return;\r\n            }\r\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit);\r\n        }\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    formatTime(): void {\r\n        if (this.isEditable) {\r\n            const time = this.time || this.previousTime;\r\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\r\n            this.unfocused.next();\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n\r\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (isInputAllowed(e)) {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    private changeTimeByArrow(keyCode: number): void {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time: string;\r\n\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + (this.minutesGap || 1));\r\n        } else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - (this.minutesGap || 1));\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isInputAllowed(e: KeyboardEvent): boolean {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\r\nimport { DateTime } from 'luxon';\r\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() selectedHour: number | string;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n","import { Directive, HostListener, Input } from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    @Input('overlay') preventClick: boolean;\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        if (!this.preventClick) {\r\n            this.eventService.dispatchEvent(e);\r\n        }\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus());\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\r\nimport {\r\n    NgxMaterialTimepicker24HoursFaceComponent\r\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {\r\n    NgxMaterialTimepicker12HoursFaceComponent\r\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {\r\n    NgxMaterialTimepickerMinutesFaceComponent\r\n} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {\r\n    NgxMaterialTimepickerDialControlComponent\r\n} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';\r\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\r\nimport { OverlayDirective } from './directives/overlay.directive';\r\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\r\nimport { AutofocusDirective } from './directives/autofocus.directive';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        NgxMaterialTimepickerDialComponent,\r\n        NgxMaterialTimepickerDialControlComponent,\r\n        NgxMaterialTimepickerPeriodComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        AutofocusDirective,\r\n        MinutesFormatterPipe,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n}\r\n"]}