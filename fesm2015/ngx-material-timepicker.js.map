{"version":3,"file":"ngx-material-timepicker.js.map","sources":["ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"sourcesContent":["export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n","export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWELVE_SHORT = 'h:m a',\r\n    TWENTY_FOUR = 'HH:mm',\r\n    TWENTY_FOUR_SHORT = 'H:m'\r\n}\r\n","import { DateTime } from 'luxon';\r\n\r\nexport namespace TimepickerUtils {\r\n\r\n    export function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n        if (unit === 'hours') {\r\n            return time.hour >= compareWith.hour;\r\n        }\r\n        if (unit === 'minutes') {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    export function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n        if (unit === 'hours') {\r\n            return time.hour <= compareWith.hour;\r\n        }\r\n        if (unit === 'minutes') {\r\n            return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n        }\r\n    }\r\n\r\n    export function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n        if (unit === 'hours') {\r\n            return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\r\n        }\r\n        if (unit === 'minutes') {\r\n            return isSameOrBefore(time, after) && isSameOrAfter(time, before);\r\n        }\r\n    }\r\n}\r\n","import { DateTime } from 'luxon';\r\n\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { TimepickerUtils } from '../utils/timepicker.utils';\r\n\r\n// @dynamic\r\nexport class TimeAdapter {\r\n\r\n    static parseTime(time: string, format = 12): string {\r\n        if (time.indexOf(':') === -1) {\r\n            return 'Invalid time';\r\n        }\r\n        let period = time.trim().substr(time.length - 2).toUpperCase();\r\n\r\n        const isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;\r\n        const [h, m] = time.split(':');\r\n\r\n\r\n\r\n        if (format === 24) {\r\n            const formattedHours = isPeriodValid ? this.formatHour(+h, 12, period as TimePeriod) : +h;\r\n            return `${formattedHours}:${parseInt(m, 10)}`;\r\n        }\r\n\r\n        const isPM = +h > 12;\r\n        const hours = isPM ? +h - 12 : +h;\r\n\r\n        period = isPeriodValid ? period : isPM ? TimePeriod.PM : TimePeriod.AM;\r\n\r\n        return `${hours}:${parseInt(m, 10)} ${period}`;\r\n    }\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = (format === 24) ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\r\n\r\n        return DateTime.fromFormat(this.parseTime(time, format), timeMask).toFormat(timeFormat).toLowerCase();\r\n    }\r\n\r\n    static convertTimeToDateTime(time: string, format = 12): DateTime {\r\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\r\n        return DateTime.fromFormat(this.parseTime(time, format), timeMask);\r\n    }\r\n\r\n    static isTimeAvailable(time: string, min?: DateTime, max?: DateTime, granularity?: 'hours' | 'minutes', minutesGap?: number): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n\r\n        const convertedTime = this.convertTimeToDateTime(time);\r\n        const minutes = convertedTime.minute;\r\n\r\n        if (minutesGap && (minutes % minutesGap !== 0)) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && TimepickerUtils.isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && TimepickerUtils.isSameOrBefore(convertedTime, max, granularity);\r\n        const isBetween = (min && max)\r\n            && TimepickerUtils.isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { TimeAdapter } from './time-adapter';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\r\n\r\n        if (isPeriodValid) {\r\n            this.periodSubject.next(period);\r\n        }\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\r\n                this.setDefaultTime(TimeAdapter.formatTime(time, format), format);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private setDefaultTime(time: string, format: number) {\r\n        const defaultTime = TimeAdapter.convertTimeToDateTime(time, format).toJSDate();\r\n\r\n        if (DateTime.fromJSDate(defaultTime).isValid) {\r\n            const period = time.substr(time.length - 2).toUpperCase();\r\n            const hour = defaultTime.getHours();\r\n\r\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = period as TimePeriod;\r\n\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\r\n    switch (period) {\r\n        case TimePeriod.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case TimePeriod.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\r\n","export enum TimeUnit {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this.backdropClickSubject.next(<MouseEvent>event);\r\n                break;\r\n            case 'keydown':\r\n                this.keydownEventSubject.next(<KeyboardEvent>event);\r\n                break;\r\n            default:\r\n                throw new Error('no such event type');\r\n        }\r\n    }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ClockFaceTime } from './models/clock-face-time.interface';\r\nimport { TimePeriod } from './models/time-period.enum';\r\nimport { merge, Subscription } from 'rxjs';\r\nimport { NgxMaterialTimepickerService } from './services/ngx-material-timepicker.service';\r\nimport { TimeUnit } from './models/time-unit.enum';\r\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\r\nimport { filter } from 'rxjs/operators';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { DateTime } from 'luxon';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    templateUrl: './ngx-material-timepicker.component.html',\r\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Input() enableKeyboardInput: boolean;\r\n    @Input() preventOverlayClick: boolean;\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this.setDefaultTime(time);\r\n    }\r\n\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() opened = new EventEmitter<null>();\r\n    @Output() closed = new EventEmitter<null>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    @ViewChild('timepickerww') timepickerComponent: ElementRef;\r\n\r\n    private _minutesGap: number;\r\n    private timepickerInput: TimepickerDirective;\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | DateTime {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | DateTime {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onHourSelected(hour: number): void {\r\n        this.changeTimeUnit(TimeUnit.MINUTE);\r\n        this.hourSelected.next(hour);\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime(): void {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.setDefaultTimeIfAvailable(\r\n            time, this.minTime as DateTime, this.maxTime as DateTime, this.format, this.minutesGap);\r\n    }\r\n\r\n    open(): void {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n        this.opened.next();\r\n    }\r\n\r\n    close(): void {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n","import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import { Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { DateTime } from 'luxon';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    // tslint:disable-next-line\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToDateTime(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | DateTime;\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToDateTime(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | DateTime;\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, this._format);\r\n        if (TimeAdapter.isTimeAvailable(time, <DateTime>this._min, <DateTime>this._max, 'minutes', this._timepicker.minutesGap)) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n\r\n    onTouched = () => {\r\n    }\r\n\r\n    private onChange: (value: any) => void = () => {\r\n    }\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        this._timepicker.setDefaultTime(time);\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\r\n\r\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\r\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\r\n\r\n    private element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (const val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === 'string') {\r\n                    for (const prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                this.setTheme(theme[val]);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\n    export function getHours(format: number): ClockFaceTime[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return {time: time === 24 ? 0 : time, angle};\r\n        });\r\n    }\r\n\r\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\r\n                const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n\r\n    export function getMinutes(gap = 1): ClockFaceTime[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n                };\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n","import { EventEmitter, Input, Output } from '@angular/core';\r\nimport { DateTime } from 'luxon';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { getHours } from '../../utils/timepicker-time.namespace';\r\n\r\n\r\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = getHours(format);\r\n    }\r\n\r\n    onTimeSelected(time: number): void {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\n","import {AfterContentInit, Component} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport { disableHours } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport { disableHours } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { DateTime } from 'luxon';\r\nimport { getMinutes, disableMinutes } from '../../utils/timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    templateUrl: './ngx-material-timepicker-face.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<number>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    isHourSelected(hour: number): boolean {\r\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    isMinuteSelected(minute: number): boolean {\r\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { DateTime } from 'luxon';\r\nimport { getHours, disableHours, getMinutes, disableMinutes } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n\r\n    isHintVisible: boolean;\r\n\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = getHours(this.format);\r\n\r\n            this.hours = disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n\r\n            this.minutes = disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n\r\n    showHint(): void {\r\n        this.isHintVisible = true;\r\n    }\r\n\r\n    hideHint(): void {\r\n        this.isHintVisible = false;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number, timeUnit: TimeUnit): any {\r\n        if (time === undefined) {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return DateTime.fromObject({hour: time}).toFormat('HH');\r\n            case TimeUnit.MINUTE:\r\n                return DateTime.fromObject({minute: time}).toFormat('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n","/* tslint:disable:triple-equals */\r\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { TimeFormatterPipe } from '../../pipes/time-formatter.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() time: string;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() focused = new EventEmitter<null>();\r\n    @Output() unfocused = new EventEmitter<null>();\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\r\n            if (this.isEditable && !changes['time'].firstChange) {\r\n                return;\r\n            }\r\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit);\r\n        }\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    formatTime(): void {\r\n        if (this.isEditable) {\r\n            const time = this.time || this.previousTime;\r\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\r\n            this.unfocused.next();\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n\r\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (isInputAllowed(e)) {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    private changeTimeByArrow(keyCode: number): void {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time: string;\r\n\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + (this.minutesGap || 1));\r\n        } else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - (this.minutesGap || 1));\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isInputAllowed(e: KeyboardEvent): boolean {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\r\nimport { DateTime } from 'luxon';\r\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() selectedHour: number | string;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n","import { Directive, HostListener, Input } from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    @Input('overlay') preventClick: boolean;\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        if (!this.preventClick) {\r\n            this.eventService.dispatchEvent(e);\r\n        }\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus());\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\r\nimport {\r\n    NgxMaterialTimepicker24HoursFaceComponent\r\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {\r\n    NgxMaterialTimepicker12HoursFaceComponent\r\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {\r\n    NgxMaterialTimepickerMinutesFaceComponent\r\n} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {\r\n    NgxMaterialTimepickerDialControlComponent\r\n} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';\r\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\r\nimport { OverlayDirective } from './directives/overlay.directive';\r\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\r\nimport { AutofocusDirective } from './directives/autofocus.directive';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        NgxMaterialTimepickerDialComponent,\r\n        NgxMaterialTimepickerDialControlComponent,\r\n        NgxMaterialTimepickerPeriodComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        AutofocusDirective,\r\n        MinutesFormatterPipe,\r\n        NgxMaterialTimepickerThemeDirective\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n}\r\n"],"names":[],"mappings":"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"}
